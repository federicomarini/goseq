[{"path":"/articles/goseq_manual.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"document gives introduction use goseq R Bioconductor package (Young et al. 2010). package provides methods performing Gene Ontology analysis RNA-seq data, taking length bias account (Oshlack Wakefield 2009). methods software used goseq equally applicable category based test RNA-seq data, KEGG pathway analysis. install goseq, can run following commands: want install development version GitHub, can alternatively run command: TODO: name sections crossreference installed, goseq package can easily loaded R using: order perform GO analysis RNA-seq data, goseq requires simple named vector, contains two pieces information. Measured genes: genes RNA-seq data gathered experiment. element vector named unique gene identifier. Differentially expressed genes: element vector either 1 0, 1 indicates gene differentially expressed 0 . organism, gene identifier category test currently natively supported goseq, also necessary supply additional information regarding genes length /association categories genes. Bioconductor R packages Rsubread allow summarization mapped reads table counts, reads per gene. , several packages exist performing differential expression analysis summarized data (e.g. edgeR, (Robinson Smyth 2007, 2008; Robinson, McCarthy, Smyth 2010)). goseq work method determining differential expression differential expression analysis outside scope document, order facilitate ease use, make use edgeR package calculate differentially expressed (DE) genes case studies document.","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"goseq\") BiocManager::install(\"federicomarini/goseq\") library(\"goseq\") #> Loading required package: BiasedUrn #> Loading required package: geneLenDataBase #>"},{"path":"/articles/goseq_manual.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading data","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"assume user can use appropriate -built R functions (read.table scan) obtain two vectors, one containing genes assayed RNA-seq experiment, containing genes DE. assume vector genes assayed named assayed.genes vector DE genes named de.genes can construct named vector suitable use goseq using following: may user can already read vector format, case can immediately used goseq.","code":"gene.vector <- as.integer(assayed.genes %in% de.genes) names(gene.vector) <- assayed.genes head(gene.vector)"},{"path":"/articles/goseq_manual.html","id":"go-testing-of-rna-seq-data","dir":"Articles","previous_headings":"","what":"GO testing of RNA-seq data","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"begin analysis, goseq first needs quantify length bias present dataset consideration. done calculating Probability Weighting Function PWF can thought function gives probability gene differentially expressed (DE), based length alone. PWF calculated fitting monotonic spline binary data series differential expression (1=DE, 0=DE) function gene length. PWF used weight chance selecting gene forming null distribution GO category membership. fact PWF calculated directly dataset consideration makes approach robust, correcting length bias present data. example, goseq run microarray dataset, length bias exists, calculated PWF nearly flat genes weighted equally, resulting length bias correction. order account length bias inherent RNA-seq data performing GO analysis (category based tests), one simply use hypergeometric distribution null distribution category membership, appropriate data without DE length bias, microarray data. GO analysis RNA-seq data requires use random sampling order generate suitable null distribution GO category membership calculate categories significance representation amongst DE genes. However, random sampling computationally expensive. cases, Wallenius distribution can used approximate true null distribution, without significant loss accuracy. goseq package implements approximation default option. option generate null distribution using random sampling also included option, users aware default number samples generated enough accurately call enrichment large number go terms. established null distribution, GO category tested representation amongst set differentially expressed genes null used calculate p-value representation.","code":""},{"path":"/articles/goseq_manual.html","id":"natively-supported-gene-identifiers-and-category-tests","dir":"Articles","previous_headings":"","what":"Natively supported Gene Identifiers and category tests","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"goseq needs know length gene, well GO categories (categories interest) gene associated . goseq relies UCSC genome browser provide length information gene. However, process fetching length every transcript slow bandwidth intensive, goseq relies offline copy information stored data package geneLenDataBase. see genome/gene identifier combinations local database, simply run: leftmost columns output command list genomes gene identifiers respectively. length data exists local database indicated second last column. genome/ID combination local database, may downloaded UCSC genome browser taken TxDb annotation package (installed). genome/ID combination found database, manually specify gene lengths. encourage users manually specify gene lengths provided upstream summarization programs. e.g. featureCounts, lengths accurate. order link GO categories genes, goseq uses organism packages Bioconductor. packages named org.<Genome>.<ID>.db, <Genome> short string identifying genome <ID> short string identifying gene identifier. Currently, goseq automatically retrieve mapping GO categories genes relevant package (long installed) commonly used genome/ID combinations. GO mappings automatically available genome/ID combination, manually specify relationship genes categories. Although Genome/ID naming conventions used organism packages differ UCSC, goseq able convert two, user need ever specify UCSC genome/ID cases. final column indicates whether Genome/ID combination supported GO categories.","code":"supportedOrganisms()"},{"path":"/articles/goseq_manual.html","id":"non-native-gene-identifier-or-category-test","dir":"Articles","previous_headings":"","what":"Non-native Gene Identifier or category test","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"organism, Gene Identifier category test wish perform native goseq database, supply one following: Length data: length gene gene identifier format. Category mappings: mapping (usually many--many) categories wish test /representation amongst DE genes genes gene identifier format.","code":""},{"path":"/articles/goseq_manual.html","id":"length-data-format","dir":"Articles","previous_headings":"Non-native Gene Identifier or category test","what":"Length data format","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"length data must formatted numeric vector, length main named vector specifying gene names/DE genes. entry give length corresponding gene bp. length data unavailable genes, entry set NA.","code":""},{"path":"/articles/goseq_manual.html","id":"category-mapping-format","dir":"Articles","previous_headings":"Non-native Gene Identifier or category test","what":"Category mapping format","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"mapping category names genes given data frame two columns. One column contain gene IDs name associated category. mapping categories genes usually many--many, data frame usually multiple rows gene name category name. Alternatively, mappings genes categories can given list. names list entries gene IDs entries vector category names gene ID corresponds.","code":""},{"path":"/articles/goseq_manual.html","id":"some-additional-tips","dir":"Articles","previous_headings":"Non-native Gene Identifier or category test","what":"Some additional tips","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"organism annotation either Ensembl UCSC, can easily turned length data using txdbmaker package. , first create TranscriptDb object using either makeTxDbFromBiomart makeTxDbFromUCSC (see help txdbmaker package using commands). TranscriptDb object, can get vector named gene ID containing median transcript length gene simply using command. relationship gene identifier GO category can usually obtained Gene Ontology website (www.geneontology.org) NCBI. Additionally, Bioconductor AnnotationDbi library recently added function makeOrgPackageFromNCBI, can used create organism package within R, using NCBI data. TODO: still current? created, package can used obtain mapping genes Gene Ontology.","code":"txsByGene <- transcriptsBy(txdb, \"gene\") lengthData <- median(width(txsByGene))"},{"path":[]},{"path":"/articles/goseq_manual.html","id":"introduction-1","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"Introduction","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"section provides analysis data RNA-seq experiment illustrate use goseq GO analysis. experiment examined effects androgen stimulation human prostate cancer cell line, LNCaP. data set includes 17 million short cDNA reads obtained treated untreated cell line sequenced Illumina’s 1G genome analyzer. sample provided raw 35 bp RNA-seq reads authors. untreated prostate cancer cells (LNCaP cell line) 4 lanes totaling ~10 million, 35 bp reads. treated cells 3 lanes totaling ~7 million, 35 bp reads. replicates technical replicates. Reads mapped NCBI version 36.3 human genome using bowtie. read mapped multiple locations discarded. Using ENSEMBL 54 annotation biomart, mapped read associated ENSEMBL gene. done associating read overlapped part gene (just exons) gene. Reads correspond genes discarded.","code":""},{"path":"/articles/goseq_manual.html","id":"source-of-the-data","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"Source of the data","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"data set used case study taken (Li et al. 2008) made available authors upon request.","code":""},{"path":"/articles/goseq_manual.html","id":"determining-the-de-genes-using-edger","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"Determining the DE genes using edgeR","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"begin , load text data convert appropriate goseq DGEList object. Next, use edgeR estimate biological dispersion calculate differential expression using negative binomial model. Finally, format DE genes vector suitable use goseq","code":"library(\"edgeR\") #> Loading required package: limma table.summary <- read.table(   system.file(\"extdata\", \"Li_sum.txt\", package = \"goseq\"),   sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE ) counts <- table.summary[, -1] rownames(counts) <- table.summary[, 1] grp <- factor(rep(c(\"Control\", \"Treated\"), times = c(4, 3))) summarized <- DGEList(counts, lib.size = colSums(counts), group = grp) disp <- estimateCommonDisp(summarized) disp$common.dispersion #> [1] 0.05688364 tested <- exactTest(disp) topTags(tested) #> Comparison of groups:  Treated-Control  #>                     logFC   logCPM       PValue          FDR #> ENSG00000127954 11.557868 6.680748 2.574972e-80 1.274766e-75 #> ENSG00000151503  5.398963 8.499530 1.781732e-65 4.410321e-61 #> ENSG00000096060  4.897600 9.446705 7.983755e-60 1.317479e-55 #> ENSG00000091879  5.737627 6.282646 1.207655e-54 1.494654e-50 #> ENSG00000132437 -5.880436 7.951910 2.950042e-52 2.920896e-48 #> ENSG00000166451  4.564246 8.458467 7.126762e-52 5.880291e-48 #> ENSG00000131016  5.254737 6.607957 1.066807e-51 7.544765e-48 #> ENSG00000163492  7.085400 5.128514 2.716461e-45 1.681014e-41 #> ENSG00000113594  4.051053 8.603264 9.272066e-44 5.100254e-40 #> ENSG00000116285  4.108522 7.864773 6.422468e-43 3.179507e-39 genes <- as.integer(   p.adjust(tested$table$PValue[tested$table$logFC != 0],            method = \"BH\") < .05) names(genes) <- row.names(tested$table[tested$table$logFC != 0, ]) table(genes) #> genes #>     0     1  #> 19535  3208"},{"path":"/articles/goseq_manual.html","id":"determining-genome-and-gene-id","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"Determining Genome and Gene ID","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"order allow automatic data retrieval, user tell goseq genome gene ID format used summarize data. case use hg19 build human genome, check code corresponds running: lists genome codes far left column, headed Genome. using hg19 also know used ENSEMBL Gene ID summarize read data, check code corresponds running: gene ID codes listed column second left, titled Id. find gene ID code ensGene. use strings whenever asked genome id. gene ID missing Genome (example case hg38), genome supported geneLenDataBase package. Gene lengths either automatically fetched TxDB, UCSC need provide manually. Supported Gene IDs automatically fetch GO terms usually either Entrez (knownGene), Ensembl (ensGene) gene symbols (geneSymbol).","code":"head(supportedOrganisms()) #>          Genome         Id  Id Description Lengths in geneLeneDataBase #> 1       anoCar1    ensGene Ensembl gene ID                        TRUE #> 2       anoGam1    ensGene Ensembl gene ID                        TRUE #> 98      anoGam3                                                  FALSE #> 3       apiMel2    ensGene Ensembl gene ID                        TRUE #> 138 Arabidopsis                                                  FALSE #> 56      bosTau2 geneSymbol     Gene Symbol                        TRUE #>     GO Annotation Available #> 1                     FALSE #> 2                      TRUE #> 98                     TRUE #> 3                     FALSE #> 138                    TRUE #> 56                     TRUE supportedOrganisms()[supportedOrganisms()$Genome == \"hg19\", ] #>    Genome         Id  Id Description Lengths in geneLeneDataBase #> 25   hg19    ensGene Ensembl gene ID                        TRUE #> 48   hg19  knownGene  Entrez Gene ID                        TRUE #> 81   hg19 geneSymbol     Gene Symbol                        TRUE #>    GO Annotation Available #> 25                    TRUE #> 48                    TRUE #> 81                    TRUE"},{"path":[]},{"path":"/articles/goseq_manual.html","id":"fitting-the-probability-weighting-function-pwf","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Fitting the Probability Weighting Function (PWF)","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"first need obtain weighting gene, depending length, given PWF. may noticed running supportedGenomes() supportedGeneIDs(), length data available local database gene ID, ensGene, genome, hg19. let goseq automatically fetch data databases.  nullp() plots resulting fit, allowing verification goodness fit continuing analysis. plotting pwf can performed using plotPWF() function. output nullp() contains data used create PWF, well PWF . data frame 3 columns, named DEgenes, bias.data pwf rownames set gene names. row corresponds gene DEgenes column specifying gene DE (1 DE, 0 DE), bias.data column giving numeric value DE bias accounted (usually gene length number counts), pwf column giving genes value probability weighting function.","code":"pwf <- nullp(genes, \"hg19\", \"ensGene\") #> Loading hg19 length data... #> Warning in pcls(G): initial point very close to some inequality constraints head(pwf) #>                 DEgenes bias.data        pwf #> ENSG00000230758       0       247 0.03757470 #> ENSG00000182463       0      3133 0.20436865 #> ENSG00000124208       0      1978 0.16881769 #> ENSG00000230753       0       466 0.06927243 #> ENSG00000224628       0      1510 0.15903532 #> ENSG00000125835       0       954 0.12711992"},{"path":"/articles/goseq_manual.html","id":"using-the-wallenius-approximation","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Using the Wallenius approximation","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"start use default method, calculate expressed GO categories among DE genes. , allow goseq fetch data automatically, except time data fetched relationship ENSEMBL gene IDs GO categories. resulting object ordered GO category representation amongst DE genes.","code":"GO.wall <- goseq(pwf, \"hg19\", \"ensGene\") #> Fetching GO annotations... #> Loading required package: AnnotationDbi #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following object is masked from 'package:limma': #>  #>     plotMA #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, match, #>     mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, setdiff, table, tapply, union, #>     unique, unsplit, which.max, which.min #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see 'citation(\"Biobase\")', #>     and for packages 'citation(\"pkgname\")'. #> Loading required package: IRanges #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:geneLenDataBase': #>  #>     unfactor #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #>  #> For 9343 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Calculating the p-values... #> 'select()' returned 1:1 mapping between keys and columns head(GO.wall) #>         category over_represented_pvalue under_represented_pvalue numDEInCat #> 2490  GO:0005737            1.898519e-10                        1       2025 #> 123   GO:0000278            5.486125e-09                        1        227 #> 2436  GO:0005615            5.196258e-08                        1        498 #> 17061 GO:0110165            6.638828e-08                        1       2646 #> 3165  GO:0006793            1.099583e-07                        1        498 #> 9061  GO:0035556            1.158245e-07                        1        512 #>       numInCat                              term ontology #> 2490      9352                         cytoplasm       CC #> 123        787                mitotic cell cycle       BP #> 2436      2079               extracellular space       CC #> 17061    12873        cellular anatomical entity       CC #> 3165      2013      phosphorus metabolic process       BP #> 9061      2029 intracellular signal transduction       BP"},{"path":"/articles/goseq_manual.html","id":"using-random-sampling","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Using random sampling","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"may sometimes desirable use random sampling generate null distribution category membership. example, check consistency results Wallenius approximation. easily accomplished using method option specify sampling repcnt option specify number samples generate: notice takes far longer Wallenius approximation. Plotting p-values one another, see little difference two methods. However, accuracy sampling method limited number samples generated, repcnt, low p-values correctly calculated. Significantly enriched GO terms may missed correcting multiple testing.","code":"GO.samp <- goseq(pwf, \"hg19\", \"ensGene\", method = \"Sampling\", repcnt = 1000) #> Fetching GO annotations... #> For 9343 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Running the simulation... #> 0%    #> 0%    #> 0%    #> 0%    #> 0%    #> 1%    #> 1%    #> 1%    #> 1%    #> 1%    #> 1%    #> 1%    #> 1%    #> 1%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 2%    #> 3%    #> 3%    #> 3%    #> 3%    #> 3%    #> 3%    #> 3%    #> 3%    #> 3%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 4%    #> 5%    #> 5%    #> 5%    #> 5%    #> 5%    #> 5%    #> 5%    #> 5%    #> 5%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 6%    #> 7%    #> 7%    #> 7%    #> 7%    #> 7%    #> 7%    #> 7%    #> 7%    #> 7%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 8%    #> 9%    #> 9%    #> 9%    #> 9%    #> 9%    #> 9%    #> 9%    #> 9%    #> 9%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 10%    #> 11%    #> 11%    #> 11%    #> 11%    #> 11%    #> 11%    #> 11%    #> 11%    #> 11%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 12%    #> 13%    #> 13%    #> 13%    #> 13%    #> 13%    #> 13%    #> 13%    #> 13%    #> 13%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 14%    #> 15%    #> 15%    #> 15%    #> 15%    #> 15%    #> 15%    #> 15%    #> 15%    #> 15%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 16%    #> 17%    #> 17%    #> 17%    #> 17%    #> 17%    #> 17%    #> 17%    #> 17%    #> 17%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 18%    #> 19%    #> 19%    #> 19%    #> 19%    #> 19%    #> 19%    #> 19%    #> 19%    #> 19%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 20%    #> 21%    #> 21%    #> 21%    #> 21%    #> 21%    #> 21%    #> 21%    #> 21%    #> 21%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 22%    #> 23%    #> 23%    #> 23%    #> 23%    #> 23%    #> 23%    #> 23%    #> 23%    #> 23%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 24%    #> 25%    #> 25%    #> 25%    #> 25%    #> 25%    #> 25%    #> 25%    #> 25%    #> 25%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 26%    #> 27%    #> 27%    #> 27%    #> 27%    #> 27%    #> 27%    #> 27%    #> 27%    #> 27%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 28%    #> 29%    #> 29%    #> 29%    #> 29%    #> 29%    #> 29%    #> 29%    #> 29%    #> 29%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 30%    #> 31%    #> 31%    #> 31%    #> 31%    #> 31%    #> 31%    #> 31%    #> 31%    #> 31%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 32%    #> 33%    #> 33%    #> 33%    #> 33%    #> 33%    #> 33%    #> 33%    #> 33%    #> 33%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 34%    #> 35%    #> 35%    #> 35%    #> 35%    #> 35%    #> 35%    #> 35%    #> 35%    #> 35%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 36%    #> 37%    #> 37%    #> 37%    #> 37%    #> 37%    #> 37%    #> 37%    #> 37%    #> 37%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 38%    #> 39%    #> 39%    #> 39%    #> 39%    #> 39%    #> 39%    #> 39%    #> 39%    #> 39%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 40%    #> 41%    #> 41%    #> 41%    #> 41%    #> 41%    #> 41%    #> 41%    #> 41%    #> 41%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 42%    #> 43%    #> 43%    #> 43%    #> 43%    #> 43%    #> 43%    #> 43%    #> 43%    #> 43%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 44%    #> 45%    #> 45%    #> 45%    #> 45%    #> 45%    #> 45%    #> 45%    #> 45%    #> 45%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 46%    #> 47%    #> 47%    #> 47%    #> 47%    #> 47%    #> 47%    #> 47%    #> 47%    #> 47%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 48%    #> 49%    #> 49%    #> 49%    #> 49%    #> 49%    #> 49%    #> 49%    #> 49%    #> 49%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 50%    #> 51%    #> 51%    #> 51%    #> 51%    #> 51%    #> 51%    #> 51%    #> 51%    #> 51%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 52%    #> 53%    #> 53%    #> 53%    #> 53%    #> 53%    #> 53%    #> 53%    #> 53%    #> 53%    #> 54%    #> 54%    #> 54%    #> 54%    #> 54%    #> 54%    #> 54%    #> 54%    #> 54%    #> 54%    #> 55%    #> 55%    #> 55%    #> 55%    #> 55%    #> 55%    #> 55%    #> 55%    #> 55%    #> 55%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 56%    #> 57%    #> 57%    #> 57%    #> 57%    #> 57%    #> 57%    #> 57%    #> 57%    #> 57%    #> 57%    #> 58%    #> 58%    #> 58%    #> 58%    #> 58%    #> 58%    #> 58%    #> 58%    #> 58%    #> 58%    #> 59%    #> 59%    #> 59%    #> 59%    #> 59%    #> 59%    #> 59%    #> 59%    #> 59%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 60%    #> 61%    #> 61%    #> 61%    #> 61%    #> 61%    #> 61%    #> 61%    #> 61%    #> 61%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 62%    #> 63%    #> 63%    #> 63%    #> 63%    #> 63%    #> 63%    #> 63%    #> 63%    #> 63%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 64%    #> 65%    #> 65%    #> 65%    #> 65%    #> 65%    #> 65%    #> 65%    #> 65%    #> 65%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 66%    #> 67%    #> 67%    #> 67%    #> 67%    #> 67%    #> 67%    #> 67%    #> 67%    #> 67%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 68%    #> 69%    #> 69%    #> 69%    #> 69%    #> 69%    #> 69%    #> 69%    #> 69%    #> 69%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 70%    #> 71%    #> 71%    #> 71%    #> 71%    #> 71%    #> 71%    #> 71%    #> 71%    #> 71%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 72%    #> 73%    #> 73%    #> 73%    #> 73%    #> 73%    #> 73%    #> 73%    #> 73%    #> 73%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 74%    #> 75%    #> 75%    #> 75%    #> 75%    #> 75%    #> 75%    #> 75%    #> 75%    #> 75%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 76%    #> 77%    #> 77%    #> 77%    #> 77%    #> 77%    #> 77%    #> 77%    #> 77%    #> 77%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 78%    #> 79%    #> 79%    #> 79%    #> 79%    #> 79%    #> 79%    #> 79%    #> 79%    #> 79%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 80%    #> 81%    #> 81%    #> 81%    #> 81%    #> 81%    #> 81%    #> 81%    #> 81%    #> 81%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 82%    #> 83%    #> 83%    #> 83%    #> 83%    #> 83%    #> 83%    #> 83%    #> 83%    #> 83%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 84%    #> 85%    #> 85%    #> 85%    #> 85%    #> 85%    #> 85%    #> 85%    #> 85%    #> 85%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 86%    #> 87%    #> 87%    #> 87%    #> 87%    #> 87%    #> 87%    #> 87%    #> 87%    #> 87%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 88%    #> 89%    #> 89%    #> 89%    #> 89%    #> 89%    #> 89%    #> 89%    #> 89%    #> 89%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 90%    #> 91%    #> 91%    #> 91%    #> 91%    #> 91%    #> 91%    #> 91%    #> 91%    #> 91%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 92%    #> 93%    #> 93%    #> 93%    #> 93%    #> 93%    #> 93%    #> 93%    #> 93%    #> 93%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 94%    #> 95%    #> 95%    #> 95%    #> 95%    #> 95%    #> 95%    #> 95%    #> 95%    #> 95%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 96%    #> 97%    #> 97%    #> 97%    #> 97%    #> 97%    #> 97%    #> 97%    #> 97%    #> 97%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 98%    #> 99%    #> 99%    #> 99%    #> 99%    #> 99%    #> 99%    #> 99%    #> 99%    #> 99%    #> 100%    #> 100%    #> 100%    #> 100%    #> 100%    #> 100%    #> Calculating the p-values... #> 'select()' returned 1:1 mapping between keys and columns head(GO.samp) #>       category over_represented_pvalue under_represented_pvalue numDEInCat numInCat #> 33  GO:0000070             0.000999001                        1         58      176 #> 40  GO:0000086             0.000999001                        1         42      125 #> 100 GO:0000226             0.000999001                        1        150      560 #> 123 GO:0000278             0.000999001                        1        227      787 #> 124 GO:0000280             0.000999001                        1        109      374 #> 244 GO:0000727             0.000999001                        1          8       12 #>                                                         term ontology #> 33                      mitotic sister chromatid segregation       BP #> 40                     G2/M transition of mitotic cell cycle       BP #> 100                    microtubule cytoskeleton organization       BP #> 123                                       mitotic cell cycle       BP #> 124                                         nuclear division       BP #> 244 double-strand break repair via break-induced replication       BP plot(log10(GO.wall[, 2]), log10(GO.samp[match(GO.wall[, 1], GO.samp[, 1]), 2]),   xlab = \"log10(Wallenius p-values)\", ylab = \"log10(Sampling p-values)\",   xlim = c(-3, 0) ) abline(0, 1, col = 3, lty = 2)"},{"path":"/articles/goseq_manual.html","id":"ignoring-length-bias","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Ignoring length bias","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"goseq also allows one perform GO analysis without correcting RNA-seq length bias. practice, useful assessing effect length bias results. NEVER use option final analysis. length bias truly present data, goseq produce nearly flat PWF length bias correction applied data methods produce results. However, still wish ignore length bias calculating GO category enrichment, accomplished using method option. Ignoring length bias gives different results length bias corrected analysis.","code":"GO.nobias <- goseq(pwf, \"hg19\", \"ensGene\", method = \"Hypergeometric\") #> Fetching GO annotations... #> For 9343 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Calculating the p-values... #> 'select()' returned 1:1 mapping between keys and columns head(GO.nobias) #>         category over_represented_pvalue under_represented_pvalue numDEInCat #> 2490  GO:0005737            3.450552e-11                        1       2025 #> 9061  GO:0035556            1.023208e-09                        1        512 #> 123   GO:0000278            1.357715e-09                        1        227 #> 17061 GO:0110165            7.815802e-09                        1       2646 #> 15209 GO:0071944            9.604453e-09                        1        852 #> 12092 GO:0048731            1.155265e-08                        1        666 #>       numInCat                              term ontology #> 2490      9352                         cytoplasm       CC #> 9061      2029 intracellular signal transduction       BP #> 123        787                mitotic cell cycle       BP #> 17061    12873        cellular anatomical entity       CC #> 15209     3638                    cell periphery       CC #> 12092     2769                system development       BP plot(log10(GO.wall[, 2]), log10(GO.nobias[match(GO.wall[, 1], GO.nobias[, 1]), 2]),   xlab = \"log10(Wallenius p-values)\", ylab = \"log10(Hypergeometric p-values)\",   xlim = c(-3, 0), ylim = c(-3, 0) ) abline(0, 1, col = 3, lty = 2)"},{"path":"/articles/goseq_manual.html","id":"limiting-go-categories-and-other-category-based-tests","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Limiting GO categories and other category based tests","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"default, goseq tests three major Gene Ontology branches: Cellular Components, Biological Processes Molecular Functions. However, possible limit testing combination major branches using test.cats argument goseq() function. done specifying vector consisting combination strings GO:CC, GO:BP GO:MF. example, test Molecular Function GO categories: Native support category tests, KEGG pathway analysis also made available via argument. See man goseq() function man page date information category tests natively supported.","code":"GO.MF <- goseq(pwf, \"hg19\", \"ensGene\", test.cats = c(\"GO:MF\")) #> Fetching GO annotations... #> For 9343 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Calculating the p-values... #> 'select()' returned 1:1 mapping between keys and columns head(GO.MF) #>        category over_represented_pvalue under_represented_pvalue numDEInCat #> 1011 GO:0005198            1.213677e-05                0.9999927        135 #> 1174 GO:0008092            8.175368e-05                0.9999420        219 #> 228  GO:0003735            8.457175e-05                0.9999623         40 #> 1160 GO:0008017            1.229304e-04                0.9999309         78 #> 2267 GO:0030215            1.596166e-04                0.9999788         11 #> 746  GO:0004725            4.042999e-04                0.9998399         29 #>      numInCat                                  term ontology #> 1011      519          structural molecule activity       MF #> 1174      820          cytoskeletal protein binding       MF #> 228       154    structural constituent of ribosome       MF #> 1160      246                   microtubule binding       MF #> 2267       17           semaphorin receptor binding       MF #> 746        75 protein tyrosine phosphatase activity       MF"},{"path":"/articles/goseq_manual.html","id":"making-sense-of-the-results","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Making sense of the results","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"performed GO analysis, may now wish interpret results. wish identify categories significantly enriched/unenriched p-value cutoff, necessary first apply kind multiple hypothesis testing correction. example, GO categories enriched using .05 FDR cutoff (Benjamini Hochberg 1995) : Unless machine, GO accession identifiers probably meaningful . Information term can obtained Gene Ontology website, http://www.geneontology.org/, using R package GO.db.","code":"enriched.GO <-    GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = \"BH\") < .05] head(enriched.GO) #> [1] \"GO:0005737\" \"GO:0000278\" \"GO:0005615\" \"GO:0110165\" \"GO:0006793\" \"GO:0035556\" library(\"GO.db\") for (go in enriched.GO[1:10]) {   print(GOTERM[[go]])   cat(\"--------------------------------------\\n\") } #> GOID: GO:0005737 #> Term: cytoplasm #> Ontology: CC #> Definition: The contents of a cell excluding the plasma membrane and #>     nucleus, but including other subcellular structures. #> -------------------------------------- #> GOID: GO:0000278 #> Term: mitotic cell cycle #> Ontology: BP #> Definition: Progression through the phases of the mitotic cell cycle, the #>     most common eukaryotic cell cycle, which canonically comprises four #>     successive phases called G1, S, G2, and M and includes replication of #>     the genome and the subsequent segregation of chromosomes into daughter #>     cells. In some variant cell cycles nuclear replication or nuclear #>     division may not be followed by cell division, or G1 and G2 phases may #>     be absent. #> Synonym: GO:0007067 #> Synonym: mitosis #> Secondary: GO:0007067 #> -------------------------------------- #> GOID: GO:0005615 #> Term: extracellular space #> Ontology: CC #> Definition: That part of a multicellular organism outside the cells #>     proper, usually taken to be outside the plasma membranes, and occupied #>     by fluid. #> Synonym: intercellular space #> -------------------------------------- #> GOID: GO:0110165 #> Term: cellular anatomical entity #> Ontology: CC #> Definition: A part of a cellular organism that is either an immaterial #>     entity or a material entity with granularity above the level of a #>     protein complex but below that of an anatomical system. Or, a #>     substance produced by a cellular organism with granularity above the #>     level of a protein complex. #> -------------------------------------- #> GOID: GO:0006793 #> Term: phosphorus metabolic process #> Ontology: BP #> Definition: The chemical reactions and pathways involving the nonmetallic #>     element phosphorus or compounds that contain phosphorus, usually in #>     the form of a phosphate group (PO4). #> Synonym: phosphorus metabolism #> -------------------------------------- #> GOID: GO:0035556 #> Term: intracellular signal transduction #> Ontology: BP #> Definition: The process in which a signal is passed on to downstream #>     components within the cell, which become activated themselves to #>     further propagate the signal and finally trigger a change in the #>     function or state of the cell. #> Synonym: GO:0007242 #> Synonym: GO:0007243 #> Synonym: GO:0023013 #> Synonym: GO:0023034 #> Synonym: intracellular signaling cascade #> Synonym: intracellular signaling pathway #> Synonym: intracellular signal transduction pathway #> Synonym: signal transmission via intracellular cascade #> Secondary: GO:0007242 #> Secondary: GO:0007243 #> Secondary: GO:0023013 #> Secondary: GO:0023034 #> -------------------------------------- #> GOID: GO:0005575 #> Term: cellular_component #> Ontology: CC #> Definition: A location, relative to cellular compartments and structures, #>     occupied by a macromolecular machine. There are three types of #>     cellular components described in the gene ontology: (1) the cellular #>     anatomical entity where a gene product carries out a molecular #>     function (e.g., plasma membrane, cytoskeleton) or membrane-enclosed #>     compartments (e.g., mitochondrion); (2) virion components, where viral #>     proteins act, and (3) the stable macromolecular complexes of which #>     gene product are parts (e.g., the clathrin complex). #> Synonym: GO:0008372 #> Synonym: cell or subcellular entity #> Synonym: cellular component #> Synonym: subcellular entity #> Secondary: GO:0008372 #> -------------------------------------- #> GOID: GO:0044281 #> Term: small molecule metabolic process #> Ontology: BP #> Definition: The chemical reactions and pathways involving small molecules, #>     any low molecular weight, monomeric, non-encoded molecule. #> Synonym: small molecule metabolism #> -------------------------------------- #> GOID: GO:0051301 #> Term: cell division #> Ontology: BP #> Definition: The process resulting in division and partitioning of #>     components of a cell to form more cells; may or may not be accompanied #>     by the physical separation of a cell into distinct, individually #>     membrane-bounded daughter cells. #> -------------------------------------- #> GOID: GO:0070062 #> Term: extracellular exosome #> Ontology: CC #> Definition: A vesicle that is released into the extracellular region by #>     fusion of the limiting endosomal membrane of a multivesicular body #>     with the plasma membrane. Extracellular exosomes, also simply called #>     exosomes, have a diameter of about 40-100 nm. #> Synonym: exosome #> Synonym: extracellular vesicular exosome #> --------------------------------------"},{"path":"/articles/goseq_manual.html","id":"understanding-goseq-internals","dir":"Articles","previous_headings":"Case study: Prostate cancer data > GO analysis","what":"Understanding goseq internals","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"situation may arise necessary user perform data processing steps usually performed automatically goseq . mind, useful step preprocessing steps performed automatically goseq understand happening. start , nullp() called, goseq uses genome gene identifiers supplied try retrieve length information genes given genes argument. , retrieves data database gene lengths maintained package geneLenDataBase. performed getlength() function following way: data cleanup, length data DE data passed makespline() function produce PWF. nullp() returns data frame 3 columns, original DEgenes vector, length bias data (column called bias.data) PWF (column named pwf). names genes also kept data frame names rows. length data obtained certain gene corresponding entries bias.data pwf columns set NA. Next call goseq function determine /representation GO categories amongst DE genes. , goseq looks appropriate organism package tries obtain mapping genes GO categories . done using getgo() function follows: Note gene categories returned NULL. means GO category found database one genes. goseq() command, enrichment calculated using genes GO category default. However, older versions goseq (1.15.2), counted genes, .e. genes categories still counted towards total number gene outside single category. possible switch two behaviors using use_genes_without_cat flag goseq(). first thing getgo() function convert UCSC genome/ID namings naming convention used organism packages. done using two hard coded conversion vectors included goseq package usually hidden user. just valid run length GO category fetching separate steps pass result nullp() goseq() functions using bias.data gene2cat arguments. Thus following two blocks code equivalent: ","code":"len <- getlength(names(genes), \"hg19\", \"ensGene\") #> Loading hg19 length data... length(len) #> [1] 22743 length(genes) #> [1] 22743 head(len) #> [1]  247 3133 1978  466 1510  954 go <- getgo(names(genes), \"hg19\", \"ensGene\") length(go) #> [1] 22743 length(genes) #> [1] 22743 head(go) #> $<NA> #> NULL #>  #> $ENSG00000182463 #>  [1] \"GO:0006139\" \"GO:0006351\" \"GO:0006355\" \"GO:0006357\" \"GO:0006366\" \"GO:0006725\" #>  [7] \"GO:0006807\" \"GO:0008150\" \"GO:0008152\" \"GO:0009058\" \"GO:0009059\" \"GO:0009889\" #> [13] \"GO:0009987\" \"GO:0010467\" \"GO:0010468\" \"GO:0010556\" \"GO:0016070\" \"GO:0018130\" #> [19] \"GO:0019219\" \"GO:0019222\" \"GO:0019438\" \"GO:0031323\" \"GO:0031326\" \"GO:0032774\" #> [25] \"GO:0034641\" \"GO:0034654\" \"GO:0043170\" \"GO:0044237\" \"GO:0044238\" \"GO:0044249\" #> [31] \"GO:0044271\" \"GO:0046483\" \"GO:0050789\" \"GO:0050794\" \"GO:0051171\" \"GO:0051252\" #> [37] \"GO:0060255\" \"GO:0065007\" \"GO:0071704\" \"GO:0080090\" \"GO:0090304\" \"GO:1901360\" #> [43] \"GO:1901362\" \"GO:1901576\" \"GO:2001141\" \"GO:0000785\" \"GO:0005575\" \"GO:0005622\" #> [49] \"GO:0005634\" \"GO:0005694\" \"GO:0032991\" \"GO:0032993\" \"GO:0043226\" \"GO:0043227\" #> [55] \"GO:0043228\" \"GO:0043229\" \"GO:0043231\" \"GO:0043232\" \"GO:0110165\" \"GO:0000981\" #> [61] \"GO:0003674\" \"GO:0003676\" \"GO:0003677\" \"GO:0003700\" \"GO:0005488\" \"GO:0005515\" #> [67] \"GO:0036094\" \"GO:0043167\" \"GO:0043169\" \"GO:0046872\" \"GO:0097159\" \"GO:0140110\" #>  #> $<NA> #> NULL #>  #> $<NA> #> NULL #>  #> $<NA> #> NULL #>  #> $ENSG00000125835 #>   [1] \"GO:0000245\" \"GO:0000375\" \"GO:0000377\" \"GO:0000387\" \"GO:0000398\" \"GO:0001510\" #>   [7] \"GO:0006139\" \"GO:0006396\" \"GO:0006397\" \"GO:0006479\" \"GO:0006725\" \"GO:0006807\" #>  [13] \"GO:0008150\" \"GO:0008152\" \"GO:0008213\" \"GO:0008380\" \"GO:0009058\" \"GO:0009059\" #>  [19] \"GO:0009451\" \"GO:0009987\" \"GO:0010467\" \"GO:0016043\" \"GO:0016070\" \"GO:0016071\" #>  [25] \"GO:0019538\" \"GO:0022607\" \"GO:0022613\" \"GO:0022618\" \"GO:0032259\" \"GO:0034641\" #>  [31] \"GO:0036211\" \"GO:0036260\" \"GO:0036261\" \"GO:0043170\" \"GO:0043412\" \"GO:0043414\" #>  [37] \"GO:0043933\" \"GO:0044085\" \"GO:0044237\" \"GO:0044238\" \"GO:0044249\" \"GO:0046483\" #>  [43] \"GO:0065003\" \"GO:0071704\" \"GO:0071826\" \"GO:0071840\" \"GO:0090304\" \"GO:1901360\" #>  [49] \"GO:1901564\" \"GO:1901576\" \"GO:1903241\" \"GO:0005575\" \"GO:0005622\" \"GO:0005634\" #>  [55] \"GO:0005654\" \"GO:0005681\" \"GO:0005682\" \"GO:0005683\" \"GO:0005684\" \"GO:0005685\" #>  [61] \"GO:0005686\" \"GO:0005687\" \"GO:0005689\" \"GO:0005697\" \"GO:0005737\" \"GO:0005829\" #>  [67] \"GO:0030532\" \"GO:0031974\" \"GO:0031981\" \"GO:0032991\" \"GO:0034708\" \"GO:0034709\" #>  [73] \"GO:0034719\" \"GO:0043226\" \"GO:0043227\" \"GO:0043229\" \"GO:0043231\" \"GO:0043233\" #>  [79] \"GO:0046540\" \"GO:0070013\" \"GO:0071004\" \"GO:0071005\" \"GO:0071007\" \"GO:0071010\" #>  [85] \"GO:0071011\" \"GO:0071013\" \"GO:0071204\" \"GO:0097525\" \"GO:0097526\" \"GO:0110165\" #>  [91] \"GO:0120114\" \"GO:0140513\" \"GO:1902494\" \"GO:1990234\" \"GO:1990904\" \"GO:0003674\" #>  [97] \"GO:0003676\" \"GO:0003723\" \"GO:0005488\" \"GO:0005515\" \"GO:0043021\" \"GO:0044877\" #> [103] \"GO:0070034\" \"GO:0070990\" \"GO:0071208\" \"GO:0097159\" \"GO:1990446\" \"GO:1990447\" goseq:::.ID_MAP #>  knownGene    refGene    ensGene geneSymbol        sgd     plasmo       tair  #>       \"eg\"       \"eg\"  \"ENSEMBL\"   \"SYMBOL\"      \"sgd\"   \"plasmo\"     \"tair\" goseq:::.ORG_PACKAGES #>           anoGam      Arabidopsis           bosTau               ce  #>      \"org.Ag.eg\"    \"org.At.tair\"      \"org.Bt.eg\"      \"org.Ce.eg\"  #>           canFam               dm           danRer      E. coli K12  #>      \"org.Cf.eg\"      \"org.Dm.eg\"      \"org.Dr.eg\"   \"org.EcK12.eg\"  #>    E. coli Sakai           galGal               hg               mm  #> \"org.EcSakai.eg\"      \"org.Gg.eg\"      \"org.Hs.eg\"      \"org.Mm.eg\"  #>           rheMac          Malaria           panTro               rn  #>     \"org.Mmu.eg\"  \"org.Pf.plasmo\"      \"org.Pt.eg\"      \"org.Rn.eg\"  #>           sacCer           susScr           xenTro  #>     \"org.Sc.sgd\"      \"org.Ss.eg\"      \"org.Xl.eg\" pwf <- nullp(genes, \"hg19\", \"ensGene\") go <- goseq(pwf, \"hg19\", \"ensGene\") gene_lengths <- getlength(names(genes), \"hg19\", \"ensGene\") pwf <- nullp(genes, bias.data = gene_lengths) go_map <- getgo(names(genes), \"hg19\", \"ensGene\") go <- goseq(pwf, \"hg19\", \"ensGene\", gene2cat = go_map)"},{"path":"/articles/goseq_manual.html","id":"kegg-pathway-analysis","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"KEGG pathway analysis","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"order illustrate performing category test present goseq database, perform KEGG pathway analysis. human, mapping KEGG pathways genes stored package org.Hs.eg.db, object org.Hs.egPATH. order test KEGG pathway representation amongst DE genes, need extract information put format goseq understands. Unfortunately, org.Hs.eg.db package contain direct mappings ENSEMBL gene ID KEGG pathway. Therefore, construct map combining ENSEMBL <-> Entrez Entrez <-> KEGG mappings. can done using following code: Note step quite time consuming. code written efficient way producing result, logic much clearer faster algorithms. source code getgo() contains efficient routine. produce PWF . , perform KEGG analysis, simply make use gene2cat option goseq(): Note tell goseq() function organism gene ID using manually supplying mapping genes categories. KEGG analysis shown illustration supply mapping gene ID category, KEGG analysis actually natively supported goseq performed following code. Noting time necessary tell goseq() function using hg19 ENSEMBL gene ID, function needs information automatically construct mapping geneid KEGG pathway.","code":"# Get the mapping from ENSEMBL 2 Entrez en2eg <- as.list(org.Hs.egENSEMBL2EG) # Get the mapping from Entrez 2 KEGG eg2kegg <- as.list(org.Hs.egPATH) # Define a function which gets all unique KEGG IDs # associated with a set of Entrez IDs grepKEGG <- function(id, mapkeys) {   unique(unlist(mapkeys[id], use.names = FALSE)) } # Apply this function to every entry in the mapping from # ENSEMBL 2 Entrez to combine the two maps kegg <- lapply(en2eg, grepKEGG, eg2kegg) head(kegg) pwf <- nullp(genes, \"hg19\", \"ensGene\") KEGG <- goseq(pwf, gene2cat = kegg) head(KEGG) pwf <- nullp(genes, \"hg19\", \"ensGene\", plot.fit = FALSE) #> Loading hg19 length data... #> Warning in pcls(G): initial point very close to some inequality constraints KEGG <- goseq(pwf, \"hg19\", \"ensGene\", test.cats = \"KEGG\") #> Fetching GO annotations... #> For 18663 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Calculating the p-values... head(KEGG) #>     category over_represented_pvalue under_represented_pvalue numDEInCat numInCat #> 88     03010            6.317053e-06                0.9999980         29       87 #> 77     00900            2.391514e-04                0.9999710         10       15 #> 113    04115            8.164693e-04                0.9996835         26       64 #> 175    04964            2.150726e-03                0.9995925         10       17 #> 27     00330            3.668792e-03                0.9986594         18       44 #> 20     00250            5.200138e-03                0.9984357         13       28"},{"path":"/articles/goseq_manual.html","id":"extracting-mappings-from-organism-packages","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"Extracting mappings from organism packages","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"know information mapping gene ID categories interest contained organism packages, goseq() fails fetch automatically, may want extract pass goseq() function using gene2cat argument. done exactly way extracting KEGG ENSEMBL mappings section “KEGG pathway analysis” . example actually worst case, necessary combine two mappings get desired list. instead wanted association Entrez gene IDs KEGG pathways, following code sufficient: note fetching GO mappings organism. data structure GO directed acyclic graph. means addition GO category associated set genes, may also children associated genes. important use org.Hs.egGO2ALLEGS org.Hs.egGO object create mapping GO categories gene identifiers, latter include links genes arising “child” GO categories. Thank Christopher Fjell pointing .","code":"kegg <- as.list(org.Hs.egPATH) head(kegg) #> $`1` #> [1] NA #>  #> $`2` #> [1] \"04610\" #>  #> $`3` #> [1] NA #>  #> $`9` #> [1] \"00232\" \"00983\" \"01100\" #>  #> $`10` #> [1] \"00232\" \"00983\" \"01100\" #>  #> $`11` #> [1] NA"},{"path":"/articles/goseq_manual.html","id":"correcting-for-other-biases","dir":"Articles","previous_headings":"Case study: Prostate cancer data","what":"Correcting for other biases","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"possible circumstances wish correct just length bias, total number counts. can make sense power detect DE depends total number counts gene receives, product gene length gene expression. correcting read count bias compensate biases, known unknown, power detect DE. hand, also remove bias resulting differences expression level, may desirable. Correcting count bias produce different PWF. Therefore, need tell goseq() data fraction DE depends calculating PWF using nullp() function. simply pass result goseq() usual. , order tell goseq() correct read count bias instead length bias, need supply numeric vector, containing number counts gene nullp(). use count bias GO analysis, simply pass vector nullp() using bias.data option. Note supply hg19 ensGene goseq() used nullp() hence pwf.counts object. Note want correct length bias, organism/gene identifier natively supported, need follow procedure , numeric vector supplied contain gene’s length instead number reads.","code":"countbias <- rowSums(counts)[rowSums(counts) != 0] length(countbias) #> [1] 22743 length(genes) #> [1] 22743 pwf.counts <- nullp(genes, bias.data = countbias, plot.fit = FALSE) #> Warning in pcls(G): initial point very close to some inequality constraints GO.counts <- goseq(pwf.counts, \"hg19\", \"ensGene\") #> Fetching GO annotations... #> For 9343 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Calculating the p-values... #> 'select()' returned 1:1 mapping between keys and columns head(GO.counts) #>         category over_represented_pvalue under_represented_pvalue numDEInCat #> 15209 GO:0071944            9.653696e-16                        1        852 #> 2590  GO:0005886            5.514780e-14                        1        791 #> 6631  GO:0023052            3.072878e-09                        1        961 #> 3352  GO:0007154            3.721183e-09                        1        974 #> 12092 GO:0048731            1.204307e-08                        1        666 #> 3705  GO:0008283            1.679259e-08                        1        345 #>       numInCat                          term ontology #> 15209     3638                cell periphery       CC #> 2590      3369               plasma membrane       CC #> 6631      4171                     signaling       BP #> 3352      4237            cell communication       BP #> 12092     2769            system development       BP #> 3705      1338 cell population proliferation       BP"},{"path":"/articles/goseq_manual.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"Christopher Fjell series bug fixes pointing difference egGO egGO2ALLEGS objects organism packages.","code":""},{"path":"/articles/goseq_manual.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"`goseq`: Gene Ontology testing for RNA-seq datasets\n","text":"vignette built :","code":"#> R version 4.4.0 (2024-04-24) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.7.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Berlin #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] GO.db_3.19.1           org.Hs.eg.db_3.19.1    AnnotationDbi_1.66.0   #>  [4] IRanges_2.38.0         S4Vectors_0.42.0       Biobase_2.64.0         #>  [7] BiocGenerics_0.50.0    edgeR_4.2.0            limma_3.60.2           #> [10] goseq_1.57.3           geneLenDataBase_1.41.2 BiasedUrn_2.0.11       #> [13] BiocStyle_2.32.0       #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3                   bitops_1.0-7                #>   [3] httr2_1.0.1                 biomaRt_2.60.0              #>   [5] rlang_1.1.4                 magrittr_2.0.3              #>   [7] matrixStats_1.3.0           compiler_4.4.0              #>   [9] RSQLite_2.3.7               mgcv_1.9-1                  #>  [11] GenomicFeatures_1.57.0      png_0.1-8                   #>  [13] systemfonts_1.1.0           vctrs_0.6.5                 #>  [15] txdbmaker_1.0.0             stringr_1.5.1               #>  [17] pkgconfig_2.0.3             crayon_1.5.2                #>  [19] fastmap_1.2.0               dbplyr_2.5.0                #>  [21] XVector_0.44.0              utf8_1.2.4                  #>  [23] Rsamtools_2.20.0            rmarkdown_2.27              #>  [25] UCSC.utils_1.0.0            ragg_1.3.2                  #>  [27] purrr_1.0.2                 bit_4.0.5                   #>  [29] xfun_0.44                   zlibbioc_1.50.0             #>  [31] cachem_1.1.0                GenomeInfoDb_1.40.1         #>  [33] jsonlite_1.8.8              progress_1.2.3              #>  [35] blob_1.2.4                  highr_0.11                  #>  [37] DelayedArray_0.30.1         BiocParallel_1.38.0         #>  [39] parallel_4.4.0              prettyunits_1.2.0           #>  [41] R6_2.5.1                    bslib_0.7.0                 #>  [43] stringi_1.8.4               rtracklayer_1.64.0          #>  [45] GenomicRanges_1.56.0        jquerylib_0.1.4             #>  [47] Rcpp_1.0.12                 bookdown_0.39               #>  [49] SummarizedExperiment_1.34.0 knitr_1.47                  #>  [51] Matrix_1.7-0                splines_4.4.0               #>  [53] tidyselect_1.2.1            rstudioapi_0.16.0           #>  [55] abind_1.4-5                 yaml_2.3.8                  #>  [57] codetools_0.2-20            curl_5.2.1                  #>  [59] lattice_0.22-6              tibble_3.2.1                #>  [61] KEGGREST_1.44.0             evaluate_0.24.0             #>  [63] desc_1.4.3                  BiocFileCache_2.12.0        #>  [65] xml2_1.3.6                  Biostrings_2.72.1           #>  [67] pillar_1.9.0                BiocManager_1.30.23         #>  [69] filelock_1.0.3              MatrixGenerics_1.16.0       #>  [71] generics_0.1.3              RCurl_1.98-1.14             #>  [73] hms_1.1.3                   glue_1.7.0                  #>  [75] tools_4.4.0                 BiocIO_1.14.0               #>  [77] locfit_1.5-9.9              GenomicAlignments_1.40.0    #>  [79] fs_1.6.4                    XML_3.99-0.16.1             #>  [81] grid_4.4.0                  nlme_3.1-165                #>  [83] GenomeInfoDbData_1.2.12     restfulr_0.0.15             #>  [85] cli_3.6.2                   rappdirs_0.3.3              #>  [87] textshaping_0.4.0           fansi_1.0.6                 #>  [89] S4Arrays_1.4.1              dplyr_1.1.4                 #>  [91] sass_0.4.9                  digest_0.6.35               #>  [93] SparseArray_1.4.8           rjson_0.2.21                #>  [95] htmlwidgets_1.6.4           memoise_2.0.1               #>  [97] htmltools_0.5.8.1           pkgdown_2.0.9               #>  [99] lifecycle_1.0.4             httr_1.4.7                  #> [101] statmod_1.5.0               bit64_4.0.5"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Young. Author. Nadia Davidson. Author. Federico Marini. Contributor, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Young, M.D., Wakefield, M.J., Smyth, G.K., Oshlack, ., Gene ontology analysis RNA-seq: accounting selection bias, Genome Biology, 11, 2, Feb 2010, R14","code":"@Article{,   title = {Gene ontology analysis for RNA-seq: accounting for selection bias},   author = {Matthew D Young and Matthew J Wakefield and Gordon K Smyth and Alicia Oshlack},   journal = {Genome Biology},   volume = {11},   pages = {R14},   year = {2010}, }"},{"path":"/index.html","id":"goseq","dir":"","previous_headings":"","what":"Gene Ontology analyser for RNA-seq and other length biased data","title":"Gene Ontology analyser for RNA-seq and other length biased data","text":"goseq package provides method detect Gene Ontology /user defined categories /represented RNA-seq data. goseq can found Bioconductor (https://www.bioconductor.org/packages/goseq).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gene Ontology analyser for RNA-seq and other length biased data","text":"can install version goseq Bioconductor commands: Alternatively, can install development version goseq GitHub :","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"goseq\") library(\"remotes\") remotes::install_github(\"federicomarini/goseq\")"},{"path":"/reference/genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Androgen stimulation of prostate cancer Cell lines. — genes","title":"Androgen stimulation of prostate cancer Cell lines. — genes","text":"data set gives RNA-seq data experiment measuring effects androgen stimulation prostate cancer.  Information given (ENSEMBL) genes least one mapping read either treated untreated RNA-seq experiment.  edgeR package used determine genes differentially expressed. details analysis can found goseq vignette.","code":""},{"path":"/reference/genes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Androgen stimulation of prostate cancer Cell lines. — genes","text":"named vector ENSEMBL genes, 1 representing differential expression.","code":""},{"path":"/reference/genes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Androgen stimulation of prostate cancer Cell lines. — genes","text":"Determination tag density required digital transcriptome analysis: application androgen-sensitive prostate cancer model, 2008, Li et. al.","code":""},{"path":"/reference/genes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Androgen stimulation of prostate cancer Cell lines. — genes","text":"Li, H., Lovci, M. T., Kwon, Y. S., Rosenfeld, M. G., Fu, X. D., Yeo, G. W. (2008) Determination tag density required digital transcriptome analysis: application androgen-sensitive prostate cancer model Proceedings National Academy Sciences United States America Date: Dec 23 Vol: 105 Issue: 51 Pages: 20179-84","code":""},{"path":"/reference/genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Androgen stimulation of prostate cancer Cell lines. — genes","text":"","code":"data(genes) head(genes) #> ENSG00000230758 ENSG00000182463 ENSG00000124208 ENSG00000230753 ENSG00000224628  #>               0               0               0               0               0  #> ENSG00000125835  #>               0"},{"path":"/reference/getgo.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch GO categories — getgo","title":"Fetch GO categories — getgo","text":"Obtains gene ontology (GO) categories associated set genes using relevant organism package.","code":""},{"path":"/reference/getgo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch GO categories — getgo","text":"","code":"getgo(genes, genome, id, fetch.cats = c(\"GO:CC\", \"GO:BP\", \"GO:MF\"))"},{"path":"/reference/getgo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch GO categories — getgo","text":"genes vector list genes get associated GO categories. genome string identifying genome genes refer . list supported organisms run supportedGenomes. id string identifying gene identifier used genes. list supported gene IDs run supportedGeneIDs. fetch.cats vector specifying categories fetch mapping category names genes .  See details valid options.","code":""},{"path":"/reference/getgo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch GO categories — getgo","text":"list entry named gene contains vector associated GO categories.  can used directly gene2cat option goseq.","code":""},{"path":"/reference/getgo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch GO categories — getgo","text":"function attempts make use organism packages (org.<Genome>.<GeneID>.db) obtain mapping gene ID GO categories.  getlength preferable gene identifier system used summarization retrieving GO categories. Valid options fetch.cats argument combination \"GO:CC\", \"GO:BP\", \"GO:MF\" & \"KEGG\".  three GO terms refer Cellular Component, Biological Process Molecular Function respectively. \"KEGG\" refers KEGG pathways. Note getgo convenience function, designed make extracting mappings GO categories Gene ID easy.  less common organisms /gene ID getgo may fail return mapping even legitimate mapping exists relevant organism package.  getgo fails, always try build mapping organism package (one exists) deciding information unavailable.  information examples can found package Vignette.","code":""},{"path":[]},{"path":"/reference/getgo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetch GO categories — getgo","text":"Matthew D. Young myoung@wehi.edu.au","code":""},{"path":"/reference/getgo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch GO categories — getgo","text":"","code":"genes <- c(\"ENSG00000124208\",             \"ENSG00000182463\",             \"ENSG00000124201\",             \"ENSG00000124205\",             \"ENSG00000124207\") getgo(genes,'hg19','ensGene') #> Loading required package: AnnotationDbi #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #> Loading required package: IRanges #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:geneLenDataBase’: #>  #>     unfactor #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #>  #> $<NA> #> NULL #>  #> $ENSG00000182463 #>  [1] \"GO:0006139\" \"GO:0006351\" \"GO:0006355\" \"GO:0006357\" \"GO:0006366\" #>  [6] \"GO:0006725\" \"GO:0006807\" \"GO:0008150\" \"GO:0008152\" \"GO:0009058\" #> [11] \"GO:0009059\" \"GO:0009889\" \"GO:0009987\" \"GO:0010467\" \"GO:0010468\" #> [16] \"GO:0010556\" \"GO:0016070\" \"GO:0018130\" \"GO:0019219\" \"GO:0019222\" #> [21] \"GO:0019438\" \"GO:0031323\" \"GO:0031326\" \"GO:0032774\" \"GO:0034641\" #> [26] \"GO:0034654\" \"GO:0043170\" \"GO:0044237\" \"GO:0044238\" \"GO:0044249\" #> [31] \"GO:0044271\" \"GO:0046483\" \"GO:0050789\" \"GO:0050794\" \"GO:0051171\" #> [36] \"GO:0051252\" \"GO:0060255\" \"GO:0065007\" \"GO:0071704\" \"GO:0080090\" #> [41] \"GO:0090304\" \"GO:1901360\" \"GO:1901362\" \"GO:1901576\" \"GO:2001141\" #> [46] \"GO:0000785\" \"GO:0005575\" \"GO:0005622\" \"GO:0005634\" \"GO:0005694\" #> [51] \"GO:0032991\" \"GO:0032993\" \"GO:0043226\" \"GO:0043227\" \"GO:0043228\" #> [56] \"GO:0043229\" \"GO:0043231\" \"GO:0043232\" \"GO:0110165\" \"GO:0000981\" #> [61] \"GO:0003674\" \"GO:0003676\" \"GO:0003677\" \"GO:0003700\" \"GO:0005488\" #> [66] \"GO:0005515\" \"GO:0036094\" \"GO:0043167\" \"GO:0043169\" \"GO:0046872\" #> [71] \"GO:0097159\" \"GO:0140110\" #>  #> $ENSG00000124201 #>   [1] \"GO:0002218\" \"GO:0002253\" \"GO:0002376\" \"GO:0002682\" \"GO:0002684\" #>   [6] \"GO:0002831\" \"GO:0002833\" \"GO:0006325\" \"GO:0006338\" \"GO:0006950\" #>  [11] \"GO:0006952\" \"GO:0006955\" \"GO:0008150\" \"GO:0008152\" \"GO:0009058\" #>  [16] \"GO:0009059\" \"GO:0009605\" \"GO:0009607\" \"GO:0009615\" \"GO:0009617\" #>  [21] \"GO:0009889\" \"GO:0009890\" \"GO:0009892\" \"GO:0009987\" \"GO:0010467\" #>  [26] \"GO:0010468\" \"GO:0010556\" \"GO:0010558\" \"GO:0010605\" \"GO:0010629\" #>  [31] \"GO:0016032\" \"GO:0016043\" \"GO:0019058\" \"GO:0019079\" \"GO:0019222\" #>  [36] \"GO:0031047\" \"GO:0031048\" \"GO:0031323\" \"GO:0031324\" \"GO:0031326\" #>  [41] \"GO:0031327\" \"GO:0031347\" \"GO:0031349\" \"GO:0031507\" \"GO:0032101\" #>  [46] \"GO:0032103\" \"GO:0040029\" \"GO:0042742\" \"GO:0043170\" \"GO:0043207\" #>  [51] \"GO:0043933\" \"GO:0044237\" \"GO:0044249\" \"GO:0044419\" \"GO:0045069\" #>  [56] \"GO:0045071\" \"GO:0045087\" \"GO:0045088\" \"GO:0045089\" \"GO:0045814\" #>  [61] \"GO:0048518\" \"GO:0048519\" \"GO:0048523\" \"GO:0048525\" \"GO:0048583\" #>  [66] \"GO:0048584\" \"GO:0050776\" \"GO:0050778\" \"GO:0050789\" \"GO:0050792\" #>  [71] \"GO:0050794\" \"GO:0050896\" \"GO:0051607\" \"GO:0051707\" \"GO:0060255\" #>  [76] \"GO:0065007\" \"GO:0070828\" \"GO:0071704\" \"GO:0071824\" \"GO:0071840\" #>  [81] \"GO:0080134\" \"GO:0098542\" \"GO:0140546\" \"GO:1901576\" \"GO:1903900\" #>  [86] \"GO:0005575\" \"GO:0005622\" \"GO:0005634\" \"GO:0005737\" \"GO:0005739\" #>  [91] \"GO:0005740\" \"GO:0005741\" \"GO:0010494\" \"GO:0016020\" \"GO:0019867\" #>  [96] \"GO:0030880\" \"GO:0031090\" \"GO:0031379\" \"GO:0031380\" \"GO:0031966\" #> [101] \"GO:0031967\" \"GO:0031968\" \"GO:0031975\" \"GO:0032991\" \"GO:0035770\" #> [106] \"GO:0036464\" \"GO:0043226\" \"GO:0043227\" \"GO:0043228\" \"GO:0043229\" #> [111] \"GO:0043231\" \"GO:0043232\" \"GO:0061695\" \"GO:0098588\" \"GO:0099080\" #> [116] \"GO:0110165\" \"GO:0140513\" \"GO:0140535\" \"GO:1902494\" \"GO:1990234\" #> [121] \"GO:0003674\" \"GO:0003676\" \"GO:0003723\" \"GO:0003824\" \"GO:0004386\" #> [126] \"GO:0005488\" \"GO:0008270\" \"GO:0036094\" \"GO:0043167\" \"GO:0043169\" #> [131] \"GO:0046872\" \"GO:0046914\" \"GO:0097159\" \"GO:0140640\" \"GO:0140657\" #>  #> $ENSG00000124205 #>   [1] \"GO:0000165\" \"GO:0000278\" \"GO:0000280\" \"GO:0000902\" \"GO:0001667\" #>   [6] \"GO:0001755\" \"GO:0001932\" \"GO:0001934\" \"GO:0001990\" \"GO:0002027\" #>  [11] \"GO:0002376\" \"GO:0002682\" \"GO:0002684\" \"GO:0002685\" \"GO:0002687\" #>  [16] \"GO:0002688\" \"GO:0002690\" \"GO:0002790\" \"GO:0003008\" \"GO:0003012\" #>  [21] \"GO:0003013\" \"GO:0003015\" \"GO:0003018\" \"GO:0003044\" \"GO:0003073\" #>  [26] \"GO:0003100\" \"GO:0006468\" \"GO:0006793\" \"GO:0006796\" \"GO:0006807\" #>  [31] \"GO:0006810\" \"GO:0006811\" \"GO:0006812\" \"GO:0006813\" \"GO:0006873\" #>  [36] \"GO:0006874\" \"GO:0006935\" \"GO:0006936\" \"GO:0006939\" \"GO:0006996\" #>  [41] \"GO:0007049\" \"GO:0007088\" \"GO:0007154\" \"GO:0007165\" \"GO:0007166\" #>  [46] \"GO:0007267\" \"GO:0007275\" \"GO:0007346\" \"GO:0007399\" \"GO:0007409\" #>  [51] \"GO:0007411\" \"GO:0008015\" \"GO:0008016\" \"GO:0008150\" \"GO:0008152\" #>  [56] \"GO:0008217\" \"GO:0008283\" \"GO:0008284\" \"GO:0009058\" \"GO:0009059\" #>  [61] \"GO:0009605\" \"GO:0009653\" \"GO:0009888\" \"GO:0009889\" \"GO:0009893\" #>  [66] \"GO:0009914\" \"GO:0009966\" \"GO:0009967\" \"GO:0009987\" \"GO:0010460\" #>  [71] \"GO:0010467\" \"GO:0010468\" \"GO:0010556\" \"GO:0010562\" \"GO:0010564\" #>  [76] \"GO:0010604\" \"GO:0010638\" \"GO:0010646\" \"GO:0010647\" \"GO:0010817\" #>  [81] \"GO:0010959\" \"GO:0010960\" \"GO:0010961\" \"GO:0014032\" \"GO:0014033\" #>  [86] \"GO:0014821\" \"GO:0014826\" \"GO:0014829\" \"GO:0015833\" \"GO:0016043\" #>  [91] \"GO:0016049\" \"GO:0016310\" \"GO:0016477\" \"GO:0019220\" \"GO:0019222\" #>  [96] \"GO:0019229\" \"GO:0019538\" \"GO:0019725\" \"GO:0022008\" \"GO:0022402\" #> [101] \"GO:0023051\" \"GO:0023052\" \"GO:0023056\" \"GO:0023061\" \"GO:0030001\" #> [106] \"GO:0030003\" \"GO:0030030\" \"GO:0030072\" \"GO:0030154\" \"GO:0030182\" #> [111] \"GO:0030318\" \"GO:0030334\" \"GO:0030335\" \"GO:0030593\" \"GO:0030595\" #> [116] \"GO:0031175\" \"GO:0031323\" \"GO:0031325\" \"GO:0031326\" \"GO:0031399\" #> [121] \"GO:0031401\" \"GO:0032101\" \"GO:0032103\" \"GO:0032501\" \"GO:0032502\" #> [126] \"GO:0032879\" \"GO:0032940\" \"GO:0032989\" \"GO:0033043\" \"GO:0033674\" #> [131] \"GO:0034220\" \"GO:0034762\" \"GO:0034764\" \"GO:0034765\" \"GO:0034767\" #> [136] \"GO:0035150\" \"GO:0035296\" \"GO:0035556\" \"GO:0036211\" \"GO:0040007\" #> [141] \"GO:0040011\" \"GO:0040012\" \"GO:0040017\" \"GO:0042127\" \"GO:0042221\" #> [146] \"GO:0042310\" \"GO:0042325\" \"GO:0042327\" \"GO:0042330\" \"GO:0042592\" #> [151] \"GO:0042886\" \"GO:0043085\" \"GO:0043170\" \"GO:0043266\" \"GO:0043268\" #> [156] \"GO:0043269\" \"GO:0043270\" \"GO:0043405\" \"GO:0043406\" \"GO:0043408\" #> [161] \"GO:0043410\" \"GO:0043412\" \"GO:0043473\" \"GO:0043549\" \"GO:0044057\" #> [166] \"GO:0044093\" \"GO:0044237\" \"GO:0044238\" \"GO:0044249\" \"GO:0045595\" #> [171] \"GO:0045597\" \"GO:0045787\" \"GO:0045823\" \"GO:0045840\" \"GO:0045859\" #> [176] \"GO:0045860\" \"GO:0045937\" \"GO:0046879\" \"GO:0046883\" \"GO:0046887\" #> [181] \"GO:0046903\" \"GO:0048066\" \"GO:0048070\" \"GO:0048285\" \"GO:0048468\" #> [186] \"GO:0048513\" \"GO:0048518\" \"GO:0048522\" \"GO:0048583\" \"GO:0048584\" #> [191] \"GO:0048588\" \"GO:0048589\" \"GO:0048666\" \"GO:0048667\" \"GO:0048675\" #> [196] \"GO:0048699\" \"GO:0048731\" \"GO:0048762\" \"GO:0048812\" \"GO:0048856\" #> [201] \"GO:0048858\" \"GO:0048863\" \"GO:0048864\" \"GO:0048869\" \"GO:0048870\" #> [206] \"GO:0048878\" \"GO:0050789\" \"GO:0050790\" \"GO:0050793\" \"GO:0050794\" #> [211] \"GO:0050801\" \"GO:0050886\" \"GO:0050896\" \"GO:0050900\" \"GO:0050920\" #> [216] \"GO:0050921\" \"GO:0050931\" \"GO:0051046\" \"GO:0051047\" \"GO:0051049\" #> [221] \"GO:0051050\" \"GO:0051094\" \"GO:0051128\" \"GO:0051130\" \"GO:0051171\" #> [226] \"GO:0051173\" \"GO:0051174\" \"GO:0051179\" \"GO:0051234\" \"GO:0051239\" #> [231] \"GO:0051240\" \"GO:0051246\" \"GO:0051247\" \"GO:0051338\" \"GO:0051341\" #> [236] \"GO:0051347\" \"GO:0051353\" \"GO:0051641\" \"GO:0051649\" \"GO:0051716\" #> [241] \"GO:0051726\" \"GO:0051783\" \"GO:0051785\" \"GO:0055074\" \"GO:0055080\" #> [246] \"GO:0055082\" \"GO:0055085\" \"GO:0060047\" \"GO:0060255\" \"GO:0060326\" #> [251] \"GO:0060485\" \"GO:0060560\" \"GO:0060584\" \"GO:0060585\" \"GO:0061564\" #> [256] \"GO:0065007\" \"GO:0065008\" \"GO:0065009\" \"GO:0070887\" \"GO:0071621\" #> [261] \"GO:0071702\" \"GO:0071704\" \"GO:0071705\" \"GO:0071805\" \"GO:0071840\" #> [266] \"GO:0071900\" \"GO:0071902\" \"GO:0080090\" \"GO:0090066\" \"GO:0090068\" #> [271] \"GO:0090497\" \"GO:0097485\" \"GO:0097529\" \"GO:0097530\" \"GO:0097746\" #> [276] \"GO:0098655\" \"GO:0098660\" \"GO:0098662\" \"GO:0098771\" \"GO:0120036\" #> [281] \"GO:0120039\" \"GO:0120305\" \"GO:0140014\" \"GO:0140352\" \"GO:0141124\" #> [286] \"GO:1901379\" \"GO:1901381\" \"GO:1901564\" \"GO:1901576\" \"GO:1902531\" #> [291] \"GO:1902533\" \"GO:1903047\" \"GO:1903522\" \"GO:1903524\" \"GO:1903530\" #> [296] \"GO:1903532\" \"GO:1904062\" \"GO:1904064\" \"GO:1990138\" \"GO:1990266\" #> [301] \"GO:2000145\" \"GO:2000147\" \"GO:0005575\" \"GO:0005576\" \"GO:0005615\" #> [306] \"GO:0110165\" \"GO:0001664\" \"GO:0003674\" \"GO:0005102\" \"GO:0005179\" #> [311] \"GO:0005488\" \"GO:0005515\" \"GO:0030545\" \"GO:0030546\" \"GO:0031705\" #> [316] \"GO:0031708\" \"GO:0048018\" \"GO:0071855\" \"GO:0098772\" \"GO:0140677\" #>  #> $ENSG00000124207 #>  [1] \"GO:0006606\" \"GO:0006611\" \"GO:0006810\" \"GO:0006886\" \"GO:0006913\" #>  [6] \"GO:0008104\" \"GO:0008150\" \"GO:0009987\" \"GO:0015031\" \"GO:0033036\" #> [11] \"GO:0033365\" \"GO:0034504\" \"GO:0045184\" \"GO:0046907\" \"GO:0051168\" #> [16] \"GO:0051169\" \"GO:0051170\" \"GO:0051179\" \"GO:0051234\" \"GO:0051641\" #> [21] \"GO:0051649\" \"GO:0070727\" \"GO:0071702\" \"GO:0071705\" \"GO:0072594\" #> [26] \"GO:0005575\" \"GO:0005576\" \"GO:0005615\" \"GO:0005622\" \"GO:0005634\" #> [31] \"GO:0005635\" \"GO:0005654\" \"GO:0005737\" \"GO:0005829\" \"GO:0012505\" #> [36] \"GO:0016020\" \"GO:0031967\" \"GO:0031974\" \"GO:0031975\" \"GO:0031981\" #> [41] \"GO:0031982\" \"GO:0043226\" \"GO:0043227\" \"GO:0043229\" \"GO:0043230\" #> [46] \"GO:0043231\" \"GO:0043233\" \"GO:0065010\" \"GO:0070013\" \"GO:0070062\" #> [51] \"GO:0110165\" \"GO:1903561\" \"GO:0003674\" \"GO:0005049\" \"GO:0005488\" #> [56] \"GO:0005515\" \"GO:0019899\" \"GO:0031267\" \"GO:0051020\" \"GO:0140104\" #> [61] \"GO:0140142\" #>"},{"path":"/reference/getlength.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves Gene length data — getlength","title":"Retrieves Gene length data — getlength","text":"Gets length gene vector.","code":""},{"path":"/reference/getlength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves Gene length data — getlength","text":"","code":"getlength(genes, genome, id)"},{"path":"/reference/getlength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves Gene length data — getlength","text":"genes vector list genes length information required. genome string identifying genome genes refer . list supported organisms run supportedGenomes. id string identifying gene identifier used genes. list supported gene IDs run supportedGeneIDs.","code":""},{"path":"/reference/getlength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves Gene length data — getlength","text":"Returns vector gene lengths, order genes.  length data unavailable particular gene NA returned position.  returned vector intended use bias.data option nullp function.","code":""},{"path":"/reference/getlength.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieves Gene length data — getlength","text":"Length data obtained data obtained UCSC genome browser combination genome id.  fetching data runtime time consuming, local copy length information common genomes gene ID included geneLenDataBase package.  function uses package fetch required data. length gene taken median length mature, mRNA, transcripts.  always preferable obtain length information directly gene ID used summarize count data, rather converting IDs using supplied databases.  Even two genes one--one mapping different identifier conventions (often case), frequently refer slightly different regions genome different lengths.  therefore recommended user perform full analysis terms one gene ID, manually obtain length data identifier used bin reads gene.","code":""},{"path":[]},{"path":"/reference/getlength.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieves Gene length data — getlength","text":"Matthew D. Young myoung@wehi.edu.au","code":""},{"path":"/reference/getlength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves Gene length data — getlength","text":"","code":"genes <- c(\"ENSG00000124208\",             \"ENSG00000182463\",             \"ENSG00000124201\",             \"ENSG00000124205\",             \"ENSG00000124207\") getlength(genes,'hg19','ensGene') #> Loading hg19 length data... #> [1] 1978.0 3133.0 2973.0 2593.0 3036.5"},{"path":"/reference/goseq-pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"goseq — goseq-pkg","title":"goseq — goseq-pkg","text":"Detects Gene Ontology /user defined categories  /represented RNA-seq data.","code":""},{"path":[]},{"path":"/reference/goseq-pkg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"goseq — goseq-pkg","text":"Maintainer: Federico Marini marinif@uni-mainz.de (ORCID) [contributor] Authors: Matthew Young my4@sanger.ac.uk Nadia Davidson nadia.davidson@mcri.edu.au","code":""},{"path":"/reference/goseq.html","id":null,"dir":"Reference","previous_headings":"","what":"goseq Gene Ontology analyser — goseq","title":"goseq Gene Ontology analyser — goseq","text":"selection-unbiased testing category enrichment amongst differentially expressed (DE) genes RNA-seq data.  default, tests gene ontology (GO) categories, categories may tested.","code":""},{"path":"/reference/goseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"goseq Gene Ontology analyser — goseq","text":"","code":"goseq(   pwf,   genome,   id,   gene2cat = NULL,   test.cats = c(\"GO:CC\", \"GO:BP\", \"GO:MF\"),   method = \"Wallenius\",   repcnt = 2000,   use_genes_without_cat = FALSE )"},{"path":"/reference/goseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"goseq Gene Ontology analyser — goseq","text":"pwf object containing gene names, DE calls, probability weighting function. Usually generated nullp. genome string identifying genome genes refer . list supported organisms run supportedGenomes. id string identifying gene identifier used genes. list supported gene IDs run supportedGeneIDs. gene2cat data frame two columns containing mapping genes categories interest.  Alternatively, list names genes entry vector containing GO categories associated gene (output produced getgo).  set NULL goseq attempts fetch GO categories automatically using getgo. test.cats vector specifying categories test representation amongst DE genes.  See details allowed options. method method use calculate unbiased category enrichment scores.  Valid options \"Wallenius\", \"Sampling\" & \"Hypergeometric\".  \"Hypergeometric\" \"Sampling\" almost never used (see details). repcnt Number random samples calculated random sampling used.  Ignored unless method=\"Sampling\". use_genes_without_cat boolean indicate whether genes without category still used. example, large number gene may GO term annotated. option set FALSE, genes ignored calculation p-values (default behaviour). option set TRUE, genes count towards total number genes outside category tested (default behaviour prior version 1.15.2).","code":""},{"path":"/reference/goseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"goseq Gene Ontology analyser — goseq","text":"goseq returns data frame several columns.  first column gives name category, second gives p-value associated category represented amongst DE genes.  third column gives p-value associated category represented amongst DE genes.  p-values corrected multiple hypothesis testing. fourth fifth columns give number differentially expressed genes category total genes category respectively. categories GO term, two additional columns GO term ontology.","code":""},{"path":"/reference/goseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"goseq Gene Ontology analyser — goseq","text":"pwf argument almost always output function nullp.  data frame 3 columns, named \"DEgenes\", \"bias.data\" \"pwf\" rownames set gene names.  row corresponds gene DEgenes column specifying gene DE (1 DE, 0 DE), bias.data column giving numeric value DE bias accounted (usually gene length number counts) pwf column giving genes value probability weighting function. goseq obtains length data UCSC GO mappings organism packages (see link{getgo} getlength details). data unsupported format need obtain GO category mapping supply goseq function using gene2cat argument. use gene category mapping goseq, use gene2cat argument.  argument takes data.frame, one column containing gene IDs containing associated categories.  mapping gene <-> category general many many multiple rows containing gene identifier.  Alternatively, gene2cat can take list, names genes entries GO categories associated genes.  format produced getgo function space efficient data.frame representation. gene2cat left NULL, goseq attempts use getgo fetch GO category gene identifier mappings. PWF usually calculated using nullp function correct length bias. However, goseq work vector weights.  bias can accounted long weight gene supplied using argument.  NAs allowed \"pwf\" \"bias.data\" columns PWF data frame (usually occur result missing length data genes).  entry NA set weighting median gene. Valid options test.cats argument combination \"GO:CC\", \"GO:BP\", \"GO:MF\" & \"KEGG\".  three GO terms refer Cellular Component, Biological Process Molecular Function respectively. \"KEGG\" refers KEGG pathways. three methods, \"Wallenius\", \"Sampling\" & \"Hypergeometric\", calculate p-values follows. \"Wallenius\" approximates true distribution numbers members category amongst DE genes Wallenius non-central hypergeometric distribution.  distribution assumes within category genes probability chosen.  Therefore, approximation works best range probabilities obtained probability weighting function small. \"Wallenius\" recommended method calculating p-values. \"Sampling\" uses random sampling approximate true distribution uses calculate p-values () representation categories. practice, use quickly becomes computationally prohibitive repcnt need set high applications. CAUTION: \"Hypergeometric\" NEVER used producing results biological interpretation.  genuinely bias power detect DE experiment, PWF reflect methods produce accurate results. \"Hypergeometric\" assumes bias power detect differential expression calculates p-values using standard hypergeometric distribution.  Useful wish test effect selection bias results.","code":""},{"path":"/reference/goseq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"goseq Gene Ontology analyser — goseq","text":"Young, M. D., Wakefield, M. J., Smyth, G. K., Oshlack, . (2010) Gene ontology analysis RNA-seq: accounting selection bias Genome Biology Date: Feb 2010 Vol: 11 Issue: 2 Pages: R14","code":""},{"path":[]},{"path":"/reference/goseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"goseq Gene Ontology analyser — goseq","text":"Matthew D. Young myoung@wehi.edu.au","code":""},{"path":"/reference/goseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"goseq Gene Ontology analyser — goseq","text":"","code":"data(genes) pwf <- nullp(genes,'hg19','ensGene') #> Loading hg19 length data... #> Warning: initial point very close to some inequality constraints  pvals <- goseq(pwf,'hg19','ensGene') #> Fetching GO annotations... #> For 9343 genes, we could not find any categories. These genes will be excluded. #> To force their use, please run with use_genes_without_cat=TRUE (see documentation). #> This was the default behavior for version 1.15.1 and earlier. #> Calculating the p-values... #> 'select()' returned 1:1 mapping between keys and columns head(pvals) #>         category over_represented_pvalue under_represented_pvalue numDEInCat #> 2490  GO:0005737            2.559737e-10                        1       2121 #> 123   GO:0000278            2.132274e-08                        1        233 #> 9061  GO:0035556            3.612206e-08                        1        538 #> 3165  GO:0006793            1.365907e-07                        1        519 #> 12646 GO:0051301            5.097381e-07                        1        168 #> 17061 GO:0110165            6.456702e-07                        1       2773 #>       numInCat                              term ontology #> 2490      9352                         cytoplasm       CC #> 123        787                mitotic cell cycle       BP #> 9061      2029 intracellular signal transduction       BP #> 3165      2013      phosphorus metabolic process       BP #> 12646      557                     cell division       BP #> 17061    12873        cellular anatomical entity       CC"},{"path":"/reference/makespline.html","id":null,"dir":"Reference","previous_headings":"","what":"Monotonic Spline — makespline","title":"Monotonic Spline — makespline","text":"Fits monotonic cubic spline data provided, using penalized constrained least squares method mgcv package.","code":""},{"path":"/reference/makespline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monotonic Spline — makespline","text":"","code":"makespline(x, y, newX = NULL, nKnots = 6, lower_bound = 10^-3)"},{"path":"/reference/makespline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monotonic Spline — makespline","text":"x predictor variable. y response variable.  Must length x. newX points return value fitted spline. specified x used. nKnots number knots use fitting spline. lower_bound spline drop value.","code":""},{"path":"/reference/makespline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monotonic Spline — makespline","text":"Returns vector values containing value fit point newX.","code":""},{"path":"/reference/makespline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monotonic Spline — makespline","text":"uses pcls function mgcv package produce fit.  monotonicity constraint enforced using mono.con package. lower_bound argument used rare occasions fitting function becomes negative arbitrarily close zero.  occur lower_bound added everywhere ensure one length given essentially infinite weighting.","code":""},{"path":"/reference/makespline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monotonic Spline — makespline","text":"Package mgcv.  particular function modification example given man page pcls.","code":""},{"path":"/reference/makespline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monotonic Spline — makespline","text":"Matthew D. Young myoung@wehi.edu.au.","code":""},{"path":"/reference/makespline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monotonic Spline — makespline","text":"","code":"y <- c( rbinom(50,p=0.4,size=1), rbinom(50,p=0.6,size=1) ) x <- 1:100 plot(x,y) p <- makespline(x,y) #> Warning: initial point very close to some inequality constraints lines(x,p)"},{"path":"/reference/nullp.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Weighting Function — nullp","title":"Probability Weighting Function — nullp","text":"Calculates Probability Weighting Function set genes based given set biased data (usually gene length) genes status differentially expressed .","code":""},{"path":"/reference/nullp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Weighting Function — nullp","text":"","code":"nullp(DEgenes, genome, id, bias.data = NULL, plot.fit = TRUE)"},{"path":"/reference/nullp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Weighting Function — nullp","text":"DEgenes named binary vector 1 represents DE, 0 DE names gene IDs. genome string identifying genome genes refer . list supported organisms run supportedGenomes. id string identifying gene identifier used genes. list supported gene IDs run supportedGeneIDs. bias.data numeric vector containing data DE may depend.  Usually median transcript length gene bp. set NULL nullp attempt fetch length using getlength. plot.fit Plot PWF ?  Calls plotPWF default values TRUE.","code":""},{"path":"/reference/nullp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Weighting Function — nullp","text":"data frame 3 columns, named \"DEgenes\", \"bias.data\" \"pwf\" rownames set gene names.  row corresponds gene DEgenes column specifying gene DE (1 DE, 0 DE), bias.data column giving numeric value DE bias accounted (usually gene length number counts) pwf column giving genes value probability weighting function. object usually passed goseq calculate enriched categories plotPWF plotting.","code":""},{"path":"/reference/nullp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability Weighting Function — nullp","text":"essential entire analysis pipeline, summarizing raw reads using goseq done just one gene identifier format.  data different format need obtain gene lengths supply nullp function using bias.data argument.  Converting supported format another format avoided whenever possible almost always result data loss. NAs allowed bias.data vector information certain gene.  Setting gene NA preferable removing analysis. bias.data left NULL, nullp attempts use getlength fetch GO category gene identifier mappings. recommended review fit produced nullp function proceeding leaving plot.fit TRUE.","code":""},{"path":"/reference/nullp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Probability Weighting Function — nullp","text":"Young, M. D., Wakefield, M. J., Smyth, G. K., Oshlack, . (2010) Gene ontology analysis RNA-seq: accounting selection bias Genome Biology Date: Feb 2010 Vol: 11 Issue: 2 Pages: R14","code":""},{"path":[]},{"path":"/reference/nullp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probability Weighting Function — nullp","text":"Matthew D. Young myoung@wehi.edu.au","code":""},{"path":"/reference/nullp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Weighting Function — nullp","text":"","code":"data(genes) pwf <- nullp(genes, 'hg19', 'ensGene') #> Loading hg19 length data... #> Warning: initial point very close to some inequality constraints"},{"path":"/reference/plotPWF.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Probability Weighting Function — plotPWF","title":"Plot the Probability Weighting Function — plotPWF","text":"Plots Probability Weighting Function created nullp binning together genes.","code":""},{"path":"/reference/plotPWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Probability Weighting Function — plotPWF","text":"","code":"plotPWF(   pwf,   binsize = \"auto\",   pwf_col = 3,   pwf_lwd = 2,   xlab = \"Biased Data in <binsize> gene bins.\",   ylab = \"Proportion DE\",   ... )"},{"path":"/reference/plotPWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Probability Weighting Function — plotPWF","text":"pwf data frame 3 columns named DEgenes, bias.data & pwf row names giving gene names.  Usually generated nullp. binsize Calculate plot fraction genes DE bins size.  set \"auto\" best binsize visualization attempted found automatically. pwf_col colour probability weighting function pwf_lwd width probability weighting function xlab x-axis label. <binsize> replaced binsize used. ylab y-axis label. ... Extra arguments passed plot.","code":""},{"path":"/reference/plotPWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Probability Weighting Function — plotPWF","text":"Nothing returned.","code":""},{"path":"/reference/plotPWF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the Probability Weighting Function — plotPWF","text":"function almost always called using output nullp function.  However, can used visualize length (type quantifiable) bias ability detect DE data set.  pwf argument needs data frame 3 columns containing numeric entries (although NAs permitted bias.data pwf columns), must named \"DEgenes\", \"bias.data\" \"pwf\", although can appear order.  row names taken gene names. DEgenes column 0s 1s 1 represents DE gene, 0 gene DE.  bias.data column quantification quantity bias detecting DE associated gene, usually gene length number counts associated gene.  Finally, pwf column gives probability weighting applied given gene.","code":""},{"path":"/reference/plotPWF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot the Probability Weighting Function — plotPWF","text":"Young, M. D., Wakefield, M. J., Smyth, G. K., Oshlack, . (2010) Gene ontology analysis RNA-seq: accounting selection bias Genome Biology Date: Feb 2010 Vol: 11 Issue: 2 Pages: R14","code":""},{"path":[]},{"path":"/reference/plotPWF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the Probability Weighting Function — plotPWF","text":"Matthew D. Young myoung@wehi.edu.au","code":""},{"path":"/reference/plotPWF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Probability Weighting Function — plotPWF","text":"","code":"data(genes) pwf <- nullp(genes, 'hg19', 'ensGene',plot.fit=FALSE) #> Loading hg19 length data... #> Warning: initial point very close to some inequality constraints plotPWF(pwf,binsize=200)"},{"path":"/reference/pp.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints progress through a loop — pp","title":"Prints progress through a loop — pp","text":"Prints progress loop","code":""},{"path":"/reference/pp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints progress through a loop — pp","text":"","code":"pp(total, count, i = i)"},{"path":"/reference/pp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints progress through a loop — pp","text":"total total number iterations count current iteration index loop","code":""},{"path":"/reference/pp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints progress through a loop — pp","text":"message indicating progress","code":""},{"path":"/reference/supportedOrganisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Supported Organisms — supportedOrganisms","title":"Supported Organisms — supportedOrganisms","text":"Lists genomes gene ids supported gene lengths gene ontology","code":""},{"path":"/reference/supportedOrganisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supported Organisms — supportedOrganisms","text":"","code":"supportedOrganisms()"},{"path":"/reference/supportedOrganisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supported Organisms — supportedOrganisms","text":"data.frame containing supported genomes gene ids","code":""},{"path":"/reference/supportedOrganisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Supported Organisms — supportedOrganisms","text":"Goseq allows user provide bias data (usually gene lengths) /gene categories (usually gene ontologies), goseq also provides data automatically many commonly used species. function lists genome gene ids automatically supported goseq. first third columns list genomes, gene ids, gene id descriptions respectively. fourth column indicates whether combination genome id available geneLengthDataBase. particular combination absent, goseq may still automatically fetch gene lengths either TxDB annotation package (must installed) download data UCSC. example gene lengths hg38 supported geneLengthDataBase may fetched means. However, always case. final column indicates GO terms automatically fetched genome id combination.  Goseq relies org annotation package (e.g. org.Hs.eg.db) existing organism. general, either lengths GO terms supported, user must enter information manually.","code":""},{"path":"/reference/supportedOrganisms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Supported Organisms — supportedOrganisms","text":"Nadia Davidson nadia.davidson@mcri.edu.au","code":""},{"path":"/reference/supportedOrganisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supported Organisms — supportedOrganisms","text":"","code":"supportedOrganisms() #>            Genome         Id       Id Description Lengths in geneLeneDataBase #> 138   Arabidopsis                                                       FALSE #> 139   E. coli K12                                                       FALSE #> 140 E. coli Sakai                                                       FALSE #> 141       Malaria                                                       FALSE #> 1         anoCar1    ensGene      Ensembl gene ID                        TRUE #> 2         anoGam1    ensGene      Ensembl gene ID                        TRUE #> 98        anoGam3                                                       FALSE #> 3         apiMel2    ensGene      Ensembl gene ID                        TRUE #> 56        bosTau2 geneSymbol          Gene Symbol                        TRUE #> 4         bosTau3    ensGene      Ensembl gene ID                        TRUE #> 57        bosTau3 geneSymbol          Gene Symbol                        TRUE #> 5         bosTau4    ensGene      Ensembl gene ID                        TRUE #> 58        bosTau4 geneSymbol          Gene Symbol                        TRUE #> 99        bosTau6                                                       FALSE #> 100       bosTau7                                                       FALSE #> 101       bosTau8                                                       FALSE #> 102       bosTau9                                                       FALSE #> 6         canFam1    ensGene      Ensembl gene ID                        TRUE #> 59        canFam1 geneSymbol          Gene Symbol                        TRUE #> 7         canFam2    ensGene      Ensembl gene ID                        TRUE #> 60        canFam2 geneSymbol          Gene Symbol                        TRUE #> 103       canFam3                                                       FALSE #> 104       canFam4                                                       FALSE #> 105       canFam5                                                       FALSE #> 106       canFam6                                                       FALSE #> 8         cavPor3    ensGene      Ensembl gene ID                        TRUE #> 107          ce10                                                       FALSE #> 108          ce11                                                       FALSE #> 61            ce2 geneSymbol          Gene Symbol                        TRUE #> 62            ce4 geneSymbol          Gene Symbol                        TRUE #> 9             ce6    ensGene      Ensembl gene ID                        TRUE #> 63            ce6 geneSymbol          Gene Symbol                        TRUE #> 64            ci1 geneSymbol          Gene Symbol                        TRUE #> 10            ci2    ensGene      Ensembl gene ID                        TRUE #> 65            ci2 geneSymbol          Gene Symbol                        TRUE #> 109      danRer10                                                       FALSE #> 110      danRer11                                                       FALSE #> 11        danRer3    ensGene      Ensembl gene ID                        TRUE #> 66        danRer3 geneSymbol          Gene Symbol                        TRUE #> 12        danRer4    ensGene      Ensembl gene ID                        TRUE #> 67        danRer4 geneSymbol          Gene Symbol                        TRUE #> 13        danRer5    ensGene      Ensembl gene ID                        TRUE #> 54        danRer5   vegaGene HAVANA Pseudogene ID                        TRUE #> 68        danRer5 geneSymbol          Gene Symbol                        TRUE #> 14        danRer6    ensGene      Ensembl gene ID                        TRUE #> 69        danRer6 geneSymbol          Gene Symbol                        TRUE #> 111       danRer7                                                       FALSE #> 70            dm1 geneSymbol          Gene Symbol                        TRUE #> 71            dm2 geneSymbol          Gene Symbol                        TRUE #> 72            dm3 geneSymbol          Gene Symbol                        TRUE #> 112           dm6                                                       FALSE #> 73        equCab1 geneSymbol          Gene Symbol                        TRUE #> 15        equCab2    ensGene      Ensembl gene ID                        TRUE #> 74        equCab2 geneSymbol          Gene Symbol                        TRUE #> 16        felCat3    ensGene      Ensembl gene ID                        TRUE #> 75        felCat3 geneSymbol          Gene Symbol                        TRUE #> 17            fr1    ensGene      Ensembl gene ID                        TRUE #> 18            fr2    ensGene      Ensembl gene ID                        TRUE #> 19        galGal2    ensGene      Ensembl gene ID                        TRUE #> 76        galGal2 geneSymbol          Gene Symbol                        TRUE #> 20        galGal3    ensGene      Ensembl gene ID                        TRUE #> 77        galGal3 geneSymbol          Gene Symbol                        TRUE #> 113       galGal4                                                       FALSE #> 114       galGal5                                                       FALSE #> 115       galGal6                                                       FALSE #> 21        gasAcu1    ensGene      Ensembl gene ID                        TRUE #> 22           hg16    ensGene      Ensembl gene ID                        TRUE #> 45           hg16  knownGene       Entrez Gene ID                        TRUE #> 78           hg16 geneSymbol          Gene Symbol                        TRUE #> 23           hg17    ensGene      Ensembl gene ID                        TRUE #> 46           hg17  knownGene       Entrez Gene ID                        TRUE #> 55           hg17   vegaGene HAVANA Pseudogene ID                        TRUE #> 79           hg17 geneSymbol          Gene Symbol                        TRUE #> 24           hg18    ensGene      Ensembl gene ID                        TRUE #> 47           hg18  knownGene       Entrez Gene ID                        TRUE #> 80           hg18 geneSymbol          Gene Symbol                        TRUE #> 25           hg19    ensGene      Ensembl gene ID                        TRUE #> 48           hg19  knownGene       Entrez Gene ID                        TRUE #> 81           hg19 geneSymbol          Gene Symbol                        TRUE #> 116          hg38                                                       FALSE #> 117          mm10                                                       FALSE #> 118          mm39                                                       FALSE #> 26            mm7    ensGene      Ensembl gene ID                        TRUE #> 49            mm7  knownGene       Entrez Gene ID                        TRUE #> 82            mm7 geneSymbol          Gene Symbol                        TRUE #> 27            mm8    ensGene      Ensembl gene ID                        TRUE #> 50            mm8  knownGene       Entrez Gene ID                        TRUE #> 83            mm8 geneSymbol          Gene Symbol                        TRUE #> 28            mm9    ensGene      Ensembl gene ID                        TRUE #> 51            mm9  knownGene       Entrez Gene ID                        TRUE #> 84            mm9 geneSymbol          Gene Symbol                        TRUE #> 29        monDom4    ensGene      Ensembl gene ID                        TRUE #> 85        monDom4 geneSymbol          Gene Symbol                        TRUE #> 30        monDom5    ensGene      Ensembl gene ID                        TRUE #> 86        monDom5 geneSymbol          Gene Symbol                        TRUE #> 31        ornAna1    ensGene      Ensembl gene ID                        TRUE #> 87        ornAna1 geneSymbol          Gene Symbol                        TRUE #> 32        oryLat2    ensGene      Ensembl gene ID                        TRUE #> 88        oryLat2 geneSymbol          Gene Symbol                        TRUE #> 33        panTro1    ensGene      Ensembl gene ID                        TRUE #> 34        panTro2    ensGene      Ensembl gene ID                        TRUE #> 89        panTro2 geneSymbol          Gene Symbol                        TRUE #> 119       panTro3                                                       FALSE #> 120       panTro4                                                       FALSE #> 121       panTro5                                                       FALSE #> 122       panTro6                                                       FALSE #> 35        ponAbe2    ensGene      Ensembl gene ID                        TRUE #> 90        ponAbe2 geneSymbol          Gene Symbol                        TRUE #> 123      rheMac10                                                       FALSE #> 36        rheMac2    ensGene      Ensembl gene ID                        TRUE #> 91        rheMac2 geneSymbol          Gene Symbol                        TRUE #> 124       rheMac3                                                       FALSE #> 125       rheMac8                                                       FALSE #> 37            rn3    ensGene      Ensembl gene ID                        TRUE #> 52            rn3  knownGene       Entrez Gene ID                        TRUE #> 92            rn3 geneSymbol          Gene Symbol                        TRUE #> 38            rn4    ensGene      Ensembl gene ID                        TRUE #> 53            rn4  knownGene       Entrez Gene ID                        TRUE #> 93            rn4 geneSymbol          Gene Symbol                        TRUE #> 126           rn5                                                       FALSE #> 127           rn6                                                       FALSE #> 128           rn7                                                       FALSE #> 39        sacCer1    ensGene      Ensembl gene ID                        TRUE #> 40        sacCer2    ensGene      Ensembl gene ID                        TRUE #> 129       sacCer3                                                       FALSE #> 94        strPur1 geneSymbol          Gene Symbol                        TRUE #> 95        strPur2 geneSymbol          Gene Symbol                        TRUE #> 130      susScr11                                                       FALSE #> 131       susScr2                                                       FALSE #> 132       susScr3                                                       FALSE #> 41        taeGut1    ensGene      Ensembl gene ID                        TRUE #> 96        taeGut1 geneSymbol          Gene Symbol                        TRUE #> 42        tetNig1    ensGene      Ensembl gene ID                        TRUE #> 43        tetNig2    ensGene      Ensembl gene ID                        TRUE #> 133       xenTro1                                                       FALSE #> 134      xenTro10                                                       FALSE #> 44        xenTro2    ensGene      Ensembl gene ID                        TRUE #> 97        xenTro2 geneSymbol          Gene Symbol                        TRUE #> 135       xenTro3                                                       FALSE #> 136       xenTro7                                                       FALSE #> 137       xenTro9                                                       FALSE #>     GO Annotation Available #> 138                    TRUE #> 139                    TRUE #> 140                    TRUE #> 141                    TRUE #> 1                     FALSE #> 2                      TRUE #> 98                     TRUE #> 3                     FALSE #> 56                     TRUE #> 4                      TRUE #> 57                     TRUE #> 5                      TRUE #> 58                     TRUE #> 99                     TRUE #> 100                    TRUE #> 101                    TRUE #> 102                    TRUE #> 6                      TRUE #> 59                     TRUE #> 7                      TRUE #> 60                     TRUE #> 103                    TRUE #> 104                    TRUE #> 105                    TRUE #> 106                    TRUE #> 8                     FALSE #> 107                    TRUE #> 108                    TRUE #> 61                     TRUE #> 62                     TRUE #> 9                      TRUE #> 63                     TRUE #> 64                    FALSE #> 10                    FALSE #> 65                    FALSE #> 109                    TRUE #> 110                    TRUE #> 11                     TRUE #> 66                     TRUE #> 12                     TRUE #> 67                     TRUE #> 13                     TRUE #> 54                    FALSE #> 68                     TRUE #> 14                     TRUE #> 69                     TRUE #> 111                    TRUE #> 70                     TRUE #> 71                     TRUE #> 72                     TRUE #> 112                    TRUE #> 73                    FALSE #> 15                    FALSE #> 74                    FALSE #> 16                    FALSE #> 75                    FALSE #> 17                    FALSE #> 18                    FALSE #> 19                     TRUE #> 76                     TRUE #> 20                     TRUE #> 77                     TRUE #> 113                    TRUE #> 114                    TRUE #> 115                    TRUE #> 21                    FALSE #> 22                     TRUE #> 45                     TRUE #> 78                     TRUE #> 23                     TRUE #> 46                     TRUE #> 55                    FALSE #> 79                     TRUE #> 24                     TRUE #> 47                     TRUE #> 80                     TRUE #> 25                     TRUE #> 48                     TRUE #> 81                     TRUE #> 116                    TRUE #> 117                    TRUE #> 118                    TRUE #> 26                     TRUE #> 49                     TRUE #> 82                     TRUE #> 27                     TRUE #> 50                     TRUE #> 83                     TRUE #> 28                     TRUE #> 51                     TRUE #> 84                     TRUE #> 29                    FALSE #> 85                    FALSE #> 30                    FALSE #> 86                    FALSE #> 31                    FALSE #> 87                    FALSE #> 32                    FALSE #> 88                    FALSE #> 33                     TRUE #> 34                     TRUE #> 89                     TRUE #> 119                    TRUE #> 120                    TRUE #> 121                    TRUE #> 122                    TRUE #> 35                    FALSE #> 90                    FALSE #> 123                    TRUE #> 36                     TRUE #> 91                     TRUE #> 124                    TRUE #> 125                    TRUE #> 37                     TRUE #> 52                     TRUE #> 92                     TRUE #> 38                     TRUE #> 53                     TRUE #> 93                     TRUE #> 126                    TRUE #> 127                    TRUE #> 128                    TRUE #> 39                     TRUE #> 40                     TRUE #> 129                    TRUE #> 94                    FALSE #> 95                    FALSE #> 130                    TRUE #> 131                    TRUE #> 132                    TRUE #> 41                    FALSE #> 96                    FALSE #> 42                    FALSE #> 43                    FALSE #> 133                    TRUE #> 134                    TRUE #> 44                     TRUE #> 97                     TRUE #> 135                    TRUE #> 136                    TRUE #> 137                    TRUE"},{"path":"/news/index.html","id":"goseq-1580","dir":"Changelog","previous_headings":"","what":"goseq 1.58.0","title":"goseq 1.58.0","text":"Role maintainer taken Federico Marini introducing roxygen-based documentation applying styler consistent spacing using Github Actions CI/CD refined import statements Re-worked vignette, transported older Rnw format Rmd","code":""}]
